package RON

// bit-separator conversions generated by ./sep2bits.pl on
// Sat Sep  2 09:51:50 EEST 2017
// from
// commit 46015741fcb79f90475938ed8c677c722b820654
// Author: Victor Grishchenko <victor.grishchenko@gmail.com>
// Date:   Mon Aug 28 16:42:45 2017 +0300
//
//     rename: Location->Reference

const SPEC_PUNCT = "*#@:"
const (
	SPEC_TYPE_SEP   = '*'
	SPEC_OBJECT_SEP = '#'
	SPEC_EVENT_SEP  = '@'
	SPEC_REF_SEP    = ':'
)
const (
	SPEC_TYPE   = 0
	SPEC_OBJECT = 1
	SPEC_EVENT  = 2
	SPEC_REF    = 3
)

func specSep2Bits(sep byte) uint {
	switch sep {
	case SPEC_TYPE_SEP:
		return SPEC_TYPE
	case SPEC_OBJECT_SEP:
		return SPEC_OBJECT
	case SPEC_EVENT_SEP:
		return SPEC_EVENT
	case SPEC_REF_SEP:
		return SPEC_REF
	default:
		panic("invalid spec separator")
	}
}
func specBits2Sep(bits uint) byte {
	switch bits {
	case SPEC_TYPE:
		return SPEC_TYPE_SEP
	case SPEC_OBJECT:
		return SPEC_OBJECT_SEP
	case SPEC_EVENT:
		return SPEC_EVENT_SEP
	case SPEC_REF:
		return SPEC_REF_SEP
	default:
		panic("invalid spec bits")
	}
}

const UUID_PUNCT = "$%+-"
const (
	UUID_NAME_SEP    = '$'
	UUID_HASH_SEP    = '%'
	UUID_EVENT_SEP   = '+'
	UUID_DERIVED_SEP = '-'
)
const (
	UUID_NAME    = 0
	UUID_HASH    = 1
	UUID_EVENT   = 2
	UUID_DERIVED = 3
)

func uuidSep2Bits(sep byte) uint {
	switch sep {
	case UUID_NAME_SEP:
		return UUID_NAME
	case UUID_HASH_SEP:
		return UUID_HASH
	case UUID_EVENT_SEP:
		return UUID_EVENT
	case UUID_DERIVED_SEP:
		return UUID_DERIVED
	default:
		panic("invalid uuid separator")
	}
}
func uuidBits2Sep(bits uint) byte {
	switch bits {
	case UUID_NAME:
		return UUID_NAME_SEP
	case UUID_HASH:
		return UUID_HASH_SEP
	case UUID_EVENT:
		return UUID_EVENT_SEP
	case UUID_DERIVED:
		return UUID_DERIVED_SEP
	default:
		panic("invalid uuid bits")
	}
}

const ATOM_PUNCT = "='>^"
const (
	ATOM_INT_SEP    = '='
	ATOM_STRING_SEP = '\''
	ATOM_REF_SEP    = '>'
	ATOM_FLOAT_SEP  = '^'
)
const (
	ATOM_INT    = 0
	ATOM_STRING = 1
	ATOM_REF    = 2
	ATOM_FLOAT  = 3
)

func atomSep2Bits(sep byte) uint {
	switch sep {
	case ATOM_INT_SEP:
		return ATOM_INT
	case ATOM_STRING_SEP:
		return ATOM_STRING
	case ATOM_REF_SEP:
		return ATOM_REF
	case ATOM_FLOAT_SEP:
		return ATOM_FLOAT
	default:
		panic("invalid atom separator")
	}
}
func atomBits2Sep(bits uint) byte {
	switch bits {
	case ATOM_INT:
		return ATOM_INT_SEP
	case ATOM_STRING:
		return ATOM_STRING_SEP
	case ATOM_REF:
		return ATOM_REF_SEP
	case ATOM_FLOAT:
		return ATOM_FLOAT_SEP
	default:
		panic("invalid atom bits")
	}
}

const OP_PUNCT = ",.;!"
const (
	OP_REDUCED_SEP = ','
	OP_RAW_SEP     = '.'
	OP_PATCH_SEP   = ';'
	OP_STATE_SEP   = '!'
)
const (
	OP_REDUCED = 0
	OP_RAW     = 1
	OP_PATCH   = 2
	OP_STATE   = 3
)

func opSep2Bits(sep byte) uint {
	switch sep {
	case OP_REDUCED_SEP:
		return OP_REDUCED
	case OP_RAW_SEP:
		return OP_RAW
	case OP_PATCH_SEP:
		return OP_PATCH
	case OP_STATE_SEP:
		return OP_STATE
	default:
		panic("invalid op separator")
	}
}
func opBits2Sep(bits uint) byte {
	switch bits {
	case OP_REDUCED:
		return OP_REDUCED_SEP
	case OP_RAW:
		return OP_RAW_SEP
	case OP_PATCH:
		return OP_PATCH_SEP
	case OP_STATE:
		return OP_STATE_SEP
	default:
		panic("invalid op bits")
	}
}

const REDEF_PUNCT = "`\\|/"
const (
	REDEF_PREV_SEP   = '`'
	REDEF_OBJECT_SEP = '\\'
	REDEF_EVENT_SEP  = '|'
	REDEF_REF_SEP    = '/'
)
const (
	REDEF_PREV   = 0
	REDEF_OBJECT = 1
	REDEF_EVENT  = 2
	REDEF_REF    = 3
)

func redefSep2Bits(sep byte) uint {
	switch sep {
	case REDEF_PREV_SEP:
		return REDEF_PREV
	case REDEF_OBJECT_SEP:
		return REDEF_OBJECT
	case REDEF_EVENT_SEP:
		return REDEF_EVENT
	case REDEF_REF_SEP:
		return REDEF_REF
	default:
		panic("invalid redef separator")
	}
}
func redefBits2Sep(bits uint) byte {
	switch bits {
	case REDEF_PREV:
		return REDEF_PREV_SEP
	case REDEF_OBJECT:
		return REDEF_OBJECT_SEP
	case REDEF_EVENT:
		return REDEF_EVENT_SEP
	case REDEF_REF:
		return REDEF_REF_SEP
	default:
		panic("invalid redef bits")
	}
}

const PREFIX_PUNCT = "([{}])"
const (
	PREFIX_PRE4_SEP = '('
	PREFIX_PRE5_SEP = '['
	PREFIX_PRE6_SEP = '{'
	PREFIX_PRE7_SEP = '}'
	PREFIX_PRE8_SEP = ']'
	PREFIX_PRE9_SEP = ')'
)
const (
	PREFIX_PRE4 = 0
	PREFIX_PRE5 = 1
	PREFIX_PRE6 = 2
	PREFIX_PRE7 = 3
	PREFIX_PRE8 = 4
	PREFIX_PRE9 = 5
)

func prefixSep2Bits(sep byte) uint {
	switch sep {
	case PREFIX_PRE4_SEP:
		return PREFIX_PRE4
	case PREFIX_PRE5_SEP:
		return PREFIX_PRE5
	case PREFIX_PRE6_SEP:
		return PREFIX_PRE6
	case PREFIX_PRE7_SEP:
		return PREFIX_PRE7
	case PREFIX_PRE8_SEP:
		return PREFIX_PRE8
	case PREFIX_PRE9_SEP:
		return PREFIX_PRE9
	default:
		panic("invalid prefix separator")
	}
}
func prefixBits2Sep(bits uint) byte {
	switch bits {
	case PREFIX_PRE4:
		return PREFIX_PRE4_SEP
	case PREFIX_PRE5:
		return PREFIX_PRE5_SEP
	case PREFIX_PRE6:
		return PREFIX_PRE6_SEP
	case PREFIX_PRE7:
		return PREFIX_PRE7_SEP
	case PREFIX_PRE8:
		return PREFIX_PRE8_SEP
	case PREFIX_PRE9:
		return PREFIX_PRE9_SEP
	default:
		panic("invalid prefix bits")
	}
}
